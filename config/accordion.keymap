/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */



#define ZMK_POINTING_DEFAULT_MOVE_VAL 600  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 10    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/pointing.h>

// HOST_OS: Linux=1, MacOS=2
#define HOST_OS 1
#include "zmk-helpers/helper.h"



// Delay for combo
#undef COMBO_TERM
#define COMBO_TERM 250

// #define NAV_TAP_TERM 300
// #define TAPDANCE_2_TERM 250
// #define TAPDANCE_3_TERM 350
#define HOLDTAP_TERM 350
#define HOLDTAP_LAYER_TERM 350
#define TIMEOUT_STICKY_LEADER_KEY  2000

&sk {
  release-after-ms = <TIMEOUT_STICKY_LEADER_KEY>;
  quick-release;
};
&sl { 
  release-after-ms = <TIMEOUT_STICKY_LEADER_KEY>;
};
&mt {
  tapping-term-ms = <HOLDTAP_TERM>;
};
&lt {
  tapping-term-ms = <HOLDTAP_LAYER_TERM>;
};


// Switches/keys Top to Bottom, Left to Right
#define T1 0
#define T2 1
#define T3 2

#define T4 3
#define T5 4
#define T6 5


#define M1 6
#define M2 7
#define M3 8

#define M4 9
#define M5 10
#define M6 11

#define B1 12
#define B2 13
#define B3 14

#define B4 15
#define B5 16
#define B6 17

#define L_AL1 0
#define L_AL2 1
#define L_NUM 2
#define L_PAR 3
#define L_NAV 4
#define L_MSE 5
#define L_FUN 6
#define L_BLE 7



// #include "keyabbrev.dtsi"
#include "characters.conf"
#include "combonames.conf"
// #include "timeouts.dtsi"
// #include "behaviors.dtsi"

&mmv {
  time-to-max-speed-ms = <0>;
  acceleration-exponent = <0>;
};

&msc {
  time-to-max-speed-ms = <0>;
  acceleration-exponent = <0>;
};




/ { behaviors {
  
  hm: homerow_mods {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    tapping-term-ms = <300>;
    quick-tap-ms = <250>;
    require-prior-idle-ms = <125>;
    flavor = "tap-preferred";
    bindings = <&kp>, <&kp>;
  };
  
  hl: homerow_layers {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    tapping-term-ms = <300>;
    quick-tap-ms = <250>;
    require-prior-idle-ms = <125>;
    flavor = "tap-preferred";
    bindings = <&mo>, <&kp>;
    retro-tap;
  };
  
  bspc_del: backspace_delete {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp BACKSPACE>, <&kp DELETE>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
  };
  
}; };

#define HLA(key) &hm LALT key
#define HLC(key) &hm LCTRL key
#define HRC(key) &hm RCTRL key
#define HLS(key) &hm LSHIFT key
#define HRS(key) &hm RSHIFT key


#define CB4(keypos, name, bindings, layers) \
  ZMK_COMBO(name, bindings, keypos, layers)


#define CB3(keypos, name, bindings) \
  ZMK_COMBO(name, bindings, keypos)
  
  
// Combos L_NAV
ZMK_COMBO(mute, &mt K_PP K_MUTE, M1 M2, L_NAV)


// Combos L_MSE
ZMK_COMBO(mmid, M_B3, T4    T6, L_MSE)
ZMK_COMBO(mbck, M_B4, T4 T5   , L_MSE)
ZMK_COMBO(mfwd, M_B5,    T5 T6, L_MSE)

// Combos L_PAR, used for dev like -> => </>
ZMK_COMBO(p_dash, &kp MINUS, M4 M5   , L_PAR)
ZMK_COMBO(p_eq  , &kp EQUAL,    M5 M6, L_PAR)
ZMK_COMBO(p_slsh, &kp FSLH , M4 T5   , L_PAR)

// combos L_NUM
ZMK_COMBO(n_euro, &kp EURO, M4 M5   , L_NUM)
ZMK_COMBO(n_gbp , &kp GBP ,    M5 M6, L_NUM)


// Combos Base layer
ZMK_COMBO(escape , &kp ESC        , T1 T2   , L_AL1)
ZMK_COMBO(tabs   , &mt LS(TAB) TAB,    T2 T3, L_AL1)
ZMK_COMBO(caps   , &kp CAPS       , T1    T3, L_AL1)
ZMK_COMBO(gui    , &sk LGUI       , T1 T2 T3, L_AL1)
ZMK_COMBO(ralt   , &sk RALT       , T4    T6, L_AL1)
ZMK_COMBO(bksp   , &kp BACKSPACE  , T4 T5   , L_AL1)
ZMK_COMBO(dele   , &kp DELETE     ,    T5 T6, L_AL1)

ZMK_COMBO(left   , &mt HOME LEFT  , M4 M5   , L_AL1)
ZMK_COMBO(rght   , &mt END  RIGHT ,    M5 M6, L_AL1)
ZMK_COMBO(up     , &kp UP         , M4    M6, L_AL1)
ZMK_COMBO(down   , &kp DOWN       , M4 M5 M6, L_AL1)



ZMK_COMBO(reflash , &bootloader, T2 T3 M2 M3, L_AL1)
ZMK_COMBO(blutooth, &sl L_BLE  , T1 M1 T3 M3, L_AL1)


// TODO  L_BLE, punctuation; accents; edit shortcuts; macro words
// TODO  RALT CAPS LGUI E_PRINT

// Done: ()[]{}:;°
// Maybe: +-=;:
// dead grave tilde acute circ dier macron?
// `~!@#$£€%^&*_¥+='"\|,./?
// ¡÷×«»“”¶¿

// !? ,; .: "' /\ #* $€£ +- =



/ { keymap { compatible = "zmk,keymap";
  alpha1 {
    display-name = "Alpha 1";
    bindings = <
      HLS(L)         HLA(D)       HLC(C)         HRC(U)     HLA(O)  HRS(Y)
      &hl L_PAR  S   &hl L_MSE T  &hl L_NAV R    &kp     A  &kp      E  &kp        I
      &hl L_NUM  N                &kp SPACE      &sl L_AL2                &hl L_FUN  H
      
    >;
  };
  alpha2 {
    display-name = "Alpha 2";
    bindings = <
      HLS(P)  HLA(B)  HLC(V)   HRC(F)  HLA(Q)  HRS(Z)
      &kp G   &kp M   &kp W    &kp X   &kp K   &kp J
      TODO            TODO     TODO            &kp ENTER    
    >;
  };
  numbers {
    display-name = "Numbers";
    bindings = <
      HLS(STAR)  HLA(MINUS)  HLC(PLUS)        HRC(N4)         HLA(N5)       HRS(N6)
      &kp N7     &kp N8      &kp N9           &kp N1          &mt SUP2 N2   &kp N3
      &mo L_NUM              &mt BSLH FSLH    &mt DEGREE N0                 &mt COMMA DOT
      
    >;
  };
  
  parentheses {
    display-name = "Parentheses";
    bindings = <
      MAYBE      &kp LBRC   &kp RBRC    &kp LBKT  &kp RBKT  &kp COLON
      &mo L_PAR  &kp LT     &kp GT      &kp LPAR  &kp RPAR  &kp SEMI
      TODO                  &kp GRAVE   &kp DQT             &kp SQT 
    >;
  };
  
  navigation {
    display-name = "Navigation+Media";
    bindings = <
      &kp LSHIFT  &kp LALT  &kp LCTRL      &kp HOME   &kp UP     &kp END
      MM_VD       MM_VU     &mo L_NAV      &kp LEFT   &kp DOWN   &kp RIGHT
      NN_PREV               NN_NEXT        &kp PG_UP             &kp PG_DN 
      
    >;
  };
  
  mouse {
    display-name = "Mouse";
    bindings = <
      &kp LSHIFT  &kp LALT   &kp LCTRL   M_B1   M_MU    M_B2
      M_B2        &mo L_MSE  M_B1        M_ML   M_MD    M_MR
      M_SL                   &kp LALT    TODO           M_SR 
      
      
    >;
  };

  
  functions {
    display-name = "Functions";
    bindings = <
      &mt LSHIFT F4  &mt LALT F5  &mt LCTRL F6    &mt RCTRL F10  &mt LALT F11  &mt RSHIFT F12
      &kp F1         &kp F2       &kp F3          &kp F7         &kp F8        &kp F9
      XX                          XX              XX                           &mo L_FUN  
      
    >;
  };
  
  
  bluetooth {
    display-name = "Bluetooth";
    bindings = <
      TODO  TODO  &out OUT_USB    &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 5
      TODO  TODO  &out OUT_BLE    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2
      TODO        TODO            TODO                        TODO 
      // TODO: &bt BT_CLR
    >;
  };
  
  

}; };

